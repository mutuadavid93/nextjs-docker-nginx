# cache zone :: 
# An area in memory that holds cache keys, that NGINX can use to determine if a file has been cached or not
#
# - /var/cache/nginx :: sets a directory to store the cached assets
# - levels=1:2 sets up a two‑level directory hierarchy as file access speed can be reduced when too many files are in a single directory
# - keys_zone=STATIC:10m defines a shared memory zone for cache keys named “STATIC” and with a size limit of 
#   10MB (which should be more than enough unless you have thousands of files) 
# - inactive=7d is the time that items will remain cached without being accessed (7 days), after which they will be removed
# - use_temp_path=off tells NGINX to write files directly to the cache directory and avoid unnecessary copying of data to a temporary 
#   storage area first
proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=7d use_temp_path=off;

# upstream block ::
# is a group of servers that we can reference by a given name
upstream nextjs_upstream {
  
  # Next.js app is in a different container so we reference it by it's service name i.e. nextjs
  # against it's exposed port 3000
  server nextjs:3000;

  # We could add additional servers(NextJs' service names) here for load-balancing
}

# Default server block
server {
  listen 80 default_server;

  #  default server and will handle all requests that aren’t matched by other server blocks (we don’t have any), 
  # we don’t need a name. So we’ll just use _
  server_name _;

  # Turn off server tokens so that the NGINX version doesn’t appear in the response headers
  server_tokens off;

  # Place proxy_* directives out into the server block so that all server blocks can reuse them
  proxy_http_version 1.1;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection 'upgrade';
  proxy_set_header Host $host;
  proxy_cache_bypass $http_upgrade;

  # Enable gzip on our NGINX server to ensure that our files are compressed before sending to our users
  gzip on;
  gzip_proxied any; # any proxied files can be gzipped
  gzip_comp_level 4;
  gzip_types text/css application/javascript image/svg+xml; # sets the types of files to compress

  # NGINX location block to tell NGINX to cache these files:
  # Tell cache zone that we called STATIC to cache any file whose path contains the /_next/static directory
  location /_next/static {
    proxy_cache STATIC;
    proxy_pass http://nextjs_upstream;

    # For testing cache - remove before deploying to production
    add_header X-Cache-Status $upstream_cache_status;
  }

  # NGINX cache all files under /static/*
  location /static {
    proxy_cache STATIC;
    # Force NGINX to cache these files since by default it won't by having it ignore Cache-Control headers from 
    # our proxied Next.js app
    proxy_ignore_headers Cache-Control;
    # We cache only for 60 minutes interval
    proxy_cache_valid 60m;
    proxy_pass http://nextjs_upstream;

    # For testing cache - remove before deploying to production
    add_header X-Cache-Status $upstream_cache_status;
  }

  location / {
    # proxy_pass directive must be inside each location block
    proxy_pass http://nextjs_upstream;
  }
}
